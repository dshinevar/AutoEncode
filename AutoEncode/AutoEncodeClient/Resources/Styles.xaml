<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:converters="clr-namespace:AutoEncodeClient.Converters">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Brushes.xaml"/>
        <ResourceDictionary Source="Templates.xaml"/>
    </ResourceDictionary.MergedDictionaries>
    <converters:EnumDisplayNameConverter x:Key="EnumDisplayNameConverter"/>
    <converters:EncodingJobStatusToVisibilityConverter x:Key="EncodingJobStatusToVisibilityConverter"/>
    <converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
    <converters:BoolToInvisibilityConverter x:Key="BoolToInvisibilityConverter"/>
    <converters:MultiVisibilityConverter x:Key="MultiVisibilityConverter"/>
    <!-- ProgressBarBase Style -->
    <Style x:Key="ProgressBarBaseStyle"
           TargetType="ProgressBar">
        <Setter Property="Foreground"
                Value="{StaticResource ProgressBarBrush}"/>
        <Setter Property="BorderBrush"
                Value="{StaticResource ProgressBarBorderBrush}"/>
        <Setter Property="Minimum"
                Value="0"/>
        <Setter Property="Maximum"
                Value="100"/>
    </Style>

    <!-- Tree View Style -->
    <Style x:Key="TreeViewStyle"
                               TargetType="TreeView">
        <Setter Property="BorderBrush"
                                    Value="Transparent"/>
        <Setter Property="Background"
                                    Value="Transparent"/>
        <Style.Resources>
            <SolidColorBrush Color="{StaticResource HighlightColor}" x:Key="{x:Static SystemColors.HighlightBrushKey}"/>
            <SolidColorBrush Color="Black" x:Key="{x:Static SystemColors.HighlightTextBrushKey}"/>
        </Style.Resources>
    </Style>

    <!-- Expander Style -->
    <Style x:Key="ExpanderStyle"
           TargetType="Expander">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Expander">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ContentColumn" 
                                              Width="0"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <ContentPresenter x:Name="Content"
                                          Grid.Column="0"/>

                        <Grid Grid.Column="1">
                            <ContentPresenter Margin="1,1,1,0"
                                              ContentSource="Header"
                                              VerticalAlignment="Top"
                                              RecognizesAccessKey="True"
                                              Panel.ZIndex="1"/>

                            <ToggleButton VerticalAlignment="Stretch"
                                          HorizontalAlignment="Stretch"
                                          Template="{StaticResource ToggleButtonTemplate}"
                                          IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Grid>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded"
                                 Value="True">
                            <Setter TargetName="ContentColumn"
                                    Property="Width"
                                    Value="{Binding Width, ElementName=Content}"/>
                            <Setter TargetName="ContentColumn"
                                    Property="MinWidth"
                                    Value="120"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ListViewItem Style (Encoding Queue - EncodingJobViewModel) -->
    <Style x:Key="ListViewItemContainerStyle" 
           TargetType="ListViewItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListViewItem">
                    <Border Background="{TemplateBinding Background}"
                            Padding="4"
                            Margin="1">
                        <Border BorderBrush="Black"        
                                BorderThickness="1"
                                CornerRadius="5"
                                Width="125"
                                VerticalAlignment="Stretch"
                                HorizontalAlignment="Stretch"
                                Padding="4,1">
                            <Border.Background>
                                <SolidColorBrush Color="LightGray" Opacity="0.4"/>
                            </Border.Background>
                            <Grid MaxHeight="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType=Border}}">
                                <Grid.RowDefinitions>
                                    <RowDefinition MinHeight="10"/>
                                    <RowDefinition Height="2*"/>
                                    <RowDefinition MinHeight="10"/>
                                </Grid.RowDefinitions>
                                <Grid Grid.Row="0">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition/>
                                        <ColumnDefinition Width="2*"/>
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Grid.Column="0"
                                               HorizontalAlignment="Left"
                                               VerticalAlignment="Center"
                                               Text="{Binding Id, StringFormat=ID: {0}}"/>
                                    <TextBlock Grid.Column="1"
                                               HorizontalAlignment="Right"
                                               VerticalAlignment="Center"
                                               Text="{Binding Status, Converter={StaticResource EnumDisplayNameConverter}}"/>
                                </Grid>
                                <TextBlock Grid.Row="1"
                                           Text="{Binding Name}"
                                           TextWrapping="WrapWithOverflow"
                                           TextTrimming="CharacterEllipsis"
                                           VerticalAlignment="Center"
                                           HorizontalAlignment="Center"/>
                                <ProgressBar Grid.Row="2"
                                             Value="{Binding EncodingProgress}"
                                             Style="{StaticResource ProgressBarBaseStyle}"
                                            
                                             MinHeight="10"
                                             Margin="5,2">
                                    <ProgressBar.Visibility>
                                        <MultiBinding Converter="{StaticResource MultiVisibilityConverter}">
                                            <Binding Path="Error" Converter="{StaticResource BoolToInvisibilityConverter}"/>
                                            <Binding Path="Status" Converter="{StaticResource EncodingJobStatusToVisibilityConverter}"/>
                                        </MultiBinding>
                                    </ProgressBar.Visibility>
                                </ProgressBar>
                                <Image Grid.Row="2"
                                       Source="error.png"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Top"
                                       Visibility="{Binding Error, Converter={StaticResource BoolToVisibilityConverter}}"/>
                            </Grid>
                        </Border>
                    </Border>

                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Error}" Value="True"/>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background"
                                    Value="{StaticResource ErrorBackgroundBrush}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Error}" Value="True"/>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background"
                                    Value="{StaticResource ErrorMouseOverBackgroundBrush}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Error}" Value="False"/>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Mode=Self}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background"
                                    Value="{StaticResource HighlightBrush}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Error}" Value="False"/>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background"
                                    Value="{StaticResource MouseOverBrush}"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>